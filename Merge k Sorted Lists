// 方案一： 两两merge，先拿两条出来merge生成一个新的序列，再依次那后面的序列来与新的序列merge
// 复杂度： 共k个序列，假设序列的平均长度为n，则merge两条的复杂度为O(2n),3条为O(3n)，所以复杂度为O（2n+3n+4n+...+kn)，因此复杂度为O(nk²)

// 方案二： 用归并排序的方法两两merge，复杂度从方案一的O(nk²),降为了O(nklogk)

// 方案三： 使用优先队列/小顶堆，维护一个大小为k的优先队列，从k个序列中，取出头元素（该序列中最小的）放入队列中（插入队列时队列会调整为有序状态），
            再取出队列的头元素（当前最小值），并把最小值所在序列向后走一步
// 复杂度： 堆大小为k，每个元素入队出队为O(logk),共nk个元素，每个元素入队出队一次，所以复杂度为O(nklogk)

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return NULL;
        
        ListNode *result=lists[0];
        for(int i=1;i<lists.size();i++){
            result = merge(result,lists[i]);
        }
        
        return result;
    }
    
    ListNode* merge(ListNode* l1,ListNode* l2){
        if(l1==NULL || l2==NULL)
            return l1==NULL ? l2 : l1;
        
        ListNode head(-1);
        ListNode *t = &head;
        ListNode *p = l1;
        ListNode *q = l2;
        
        while(p!=NULL && q!=NULL){
            if(p->val < q->val){
                t->next=p;
                p=p->next;
            }
            else{
                t->next=q;
                q=q->next;
            }
            t=t->next;
        }
        
        if(q==NULL) t->next=p;
        else t->next=q;
        
        return head.next;
    }
    
};
--------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return NULL;
        if(lists.size()==1) return lists[0];
        if(lists.size()==2) return merge(lists[0],lists[1]);
        
        int n=lists.size();
        int mid=n/2;
        vector<ListNode*> left(lists.begin(),lists.begin()+mid);
        vector<ListNode*> right(lists.begin()+mid,lists.end());
        return merge(mergeKLists(left),mergeKLists(right));
    }
    
    ListNode* merge(ListNode* l1,ListNode* l2){
        if(l1==NULL || l2==NULL)
            return l1==NULL ? l2 : l1;
        
        ListNode head(-1);
        ListNode *t = &head;
        ListNode *p = l1;
        ListNode *q = l2;
        
        while(p!=NULL && q!=NULL){
            if(p->val < q->val){
                t->next=p;
                p=p->next;
            }
            else{
                t->next=q;
                q=q->next;
            }
            t=t->next;
        }
        
        if(q==NULL) t->next=p;
        else t->next=q;
        
        return head.next;
    }
    
};

---------------------------------------------------------------------------------------------------------------------------------------

class cmp{
public:
    bool operator() (ListNode *a,ListNode *b){
        return a->val > b->val;
    }
 };
 
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return NULL;
        if(lists.size()==1) return lists[0];
        
        priority_queue<ListNode*,vector<ListNode*>,cmp> que;
        for(int i=0;i<lists.size();i++){
            if(lists[i]!=NULL)
                que.push(lists[i]);
        }
        ListNode *head=NULL,*pre=NULL,*temp;
        while(!que.empty()>0){
            temp=que.top();
            que.pop();
            if(pre==NULL){
                head=temp;
            }
            else{
                pre->next=temp;
            }
            pre=temp;
            if(temp->next!=NULL){
                que.push(temp->next);
            }
        }
        return head;
    }
    
};
