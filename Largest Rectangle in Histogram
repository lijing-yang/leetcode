// 维护一个递增的栈
// 依次扫描数组元素，若比栈顶元素大，则入栈，否则，栈中不小于该元素的依次出栈，每出栈一个（temp），计算以temp高度为中心的矩形面积
// 以temp为中心的矩形： 宽为temp的高度，因为栈保持递增，所以矩形长度的起始为栈中前一个元素的位置，结束为当前位置
// 在直方图最后补充（-1），因为栈为递增的，因此可以保证扫描到最后（-1）时，前面元素均已出栈

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        
        if(heights.size()==0) return 0;
        heights.push_back(-1);
        
        int max=heights[0],n=heights.size(),temp;
        stack<int> st;
        
        for(int i=0;i<n;i++){
            if(st.empty() || heights[i]>heights[st.top()]){
                st.push(i);
            }
            else{
                while(!st.empty() && heights[i]<=heights[st.top()]){
                    temp = st.top();
                    st.pop();
                    if(heights[temp]*(st.empty() ? i : i-st.top()-1) > max ) 
                        max = heights[temp]*(st.empty() ? i : i-st.top()-1) ;
                }
                st.push(i);
            }
        }
        
        return max;
        
        
    }
};
